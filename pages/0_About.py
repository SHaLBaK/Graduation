# Web Library
import streamlit as st

# Page Config
st.set_page_config(layout="wide", page_title='Pages')
st.markdown("""<style> section[data-testid="stSidebar"][aria-expanded="true"]{min-width: 100px;max-width: 250px; display: inline; } </style>""", unsafe_allow_html=True)

# Header
a, b = st.columns([7,2])
with a:
    st.title("About")
    st.subheader("Mobility Plan database update" )

with b:
    st.write ( ' ')
    st.write ( ' ')
    st.write ( 'Logged in as:')
    st.write( st.session_state.email2 )

st.divider()

# Introduction
st.subheader('Introduction')
st.markdown('''
This project aims to intergate multiple databases into one, and create a map visualization of the Mobility Plan in the city,
             which includes attributes integrated from external sources, which will allow for wider range of queries of different maps in a user friendly way.
''')
            
st.divider()

# Challenges
st.subheader("Challenges:" )
st.write ( ' ')
st.write ( ' ')

st.write( '##### Spatial Join')
st.markdown('''
            Unlike most common databases where you have a Primary and Secondary keys that are used to join and merge tables,
            the tables (Database) represented in this project is geo-referenced data, which requires Spatial Join instead of the regular
            join. A Spatial join depends on the record location in space (represented by its coordinates) to decide which records belong
            in the same spatial location. (more details about Spatial join can be found in references at the end of this page)
            ''')

st.write ( ' ')
st.write( '##### Intersection (From & To):')
st.image('Data/img01.png', caption='Intersection Process')
st.markdown('''
     Finding a segment of the street using the streets it intersects was challenging because the original database did not contain
     from or to features, that can be achieved on three stages:
     * Get the direction of each street segment and use it to separate the N-S and E-W streets.
     * Extend then Intersect the streets together to create points (containing intersecting streets)
     * Run the Original database through a function to take the Form and To street names from the Intersection database.
            ''')

st.write ( ' ')           
st.write( '##### Streets vs Segment:')
st.markdown('''            
            The records in the Original Database are represented in segments not streets. While the user is more interested in full Intersection to
            Intersection street (which contains more than one segment), a function needed to query the segments that fall between two intersections based on the user input.
''')


st.write ( ' ')           
st.write( '##### Streets Naming Convention:')
st.markdown('''            
            Streets in the Database have various conventions, some just have the street name like Oak St. others have a Direction then two syllables 
            then street type such as N Pear Tree Pl. In order to be able to use these names in the search per user input I had to clean the street name
            feature by splitting the column into Prefix, Name and Street Type.
''')

st.divider()

# Recommendations
st.subheader("Future recommendation:" )

st.write ( ' ')
st.write( '##### Obtain more crash data')
st.markdown('''
            Crash data has a lot of potential for data exploring and analysis, due to the time of this project and limited access
             I was only able to obtain 2022 crash data, obtaining more historical data will allow for continuous data exploring, Crashes over time, 
            which can be a great training set for a machine learning model to predict future crash rates or the affect of different road improvements.
            ''')

st.write ( ' ')       
st.write( '##### Obtain volume counts')
st.markdown('''
      the study of volume counts will allow to predict the congestion on different intersection by providing forecasted volume counts generated by 
            a machine learning model
                 ''')
            
st.write ( ' ')       
st.write( '##### Customize per Department')
st.markdown('''            
            A future approach is to customize the application specifically to meet each department's needs, Park department has different needs
            than Traffic control, reaching out to departments heads and present the idea.
''')


#S######################################################################################
st.divider()
st.write('For more information about Spaial data you may refere to the following sources:')

st.write(  'https://pygis.io/docs/e_spatial_joins.html')
st.write( 'https://geopandas.org/en/stable/gallery/spatial_joins.html' )
